# pool:
#   vmImage: ubuntu-18.04

# variables:
#   REPO_NAME: pyspline
#   HOME: /home/mdolabuser/
#   DOCKER_WORKING_DIR: /home/mdolabuser/repos/$REPO_NAME
#   DOCKER_MOUNT_DIR: /home/mdolabuser/travis/$REPO_NAME

#   DOCKER_TAG: u18-gcc-ompi-stable

# jobs:
# - job:
#   container:
#     image: mdolab/public:$(DOCKER_TAG)
#     options: -u 0

#   steps:
#   - script: ls -a /home/mdolabuser && pwd
#   # - script: docker run -t -d --name app --mount "type=bind,src=$(pwd),target=$(DOCKER_MOUNT_DIR)" mdolab/public:$(DOCKER_TAG) /bin/bash
#   # We thrown away the existing repo in Docker, and copy the new one in-place
#   # - script: rm -rf $(DOCKER_WORKING_DIR) && cp -r . $(DOCKER_WORKING_DIR)
#   # - script: . $(HOME)/.bashrc_mdolab && cd $(DOCKER_WORKING_DIR) && cp config/defaults/config.LINUX_GFORTRAN.mk config/config.mk && make;
#   # - script: . $(HOME)/.bashrc_mdolab && cd $(DOCKER_WORKING_DIR) && pip install .
#   - script: . $(HOME)/.bashrc_mdolab && cd $(DOCKER_WORKING_DIR) && testflo . -v
#   # - script: docker rm -f app
#   workspace:
#     clean: all

resources:
  containers:
  - container: builder
    image: mdolab/public:u18-gcc-ompi-stable
    options: -u 0
steps:
- script: cp -r /home/mdolabuser/repos .
  target:
    container: builder
- task: Docker@2
  inputs:
    command: stop
    container: builder